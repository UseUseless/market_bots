import osimport subprocess # Модуль для запуска дочерних процессов (нашего run.py)import argparseimport sysimport loggingfrom config import PATH_CONFIGlogging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')def run_batch_test(strategy_name: str, interval: str, data_dir: str = PATH_CONFIG["DATA_DIR"]):    """    Запускает бэктест указанной стратегии на всех .parquet файлах    в указанной директории данных.    """    logging.info(f"--- Запуск пакетного тестирования для стратегии '{strategy_name}' ---")    # Собираем полный путь к папке с данными для нужного интервала (например, "data/5min")    interval_path = os.path.join(data_dir, interval)    # Проверяем, существует ли такая папка    if not os.path.isdir(interval_path):        logging.error(f"Ошибка: Директория с данными не найдена: {interval_path}")        return    # Получаем список всех .parquet файлов в директории    data_files = [f for f in os.listdir(interval_path) if f.endswith('.parquet')]    # Проверяем, нашлись ли вообще файлы для тестирования    if not data_files:        logging.warning(f"В директории {interval_path} не найдено файлов данных (.parquet).")        logging.warning("Убедитесь, что вы скачали данные с помощью download_data.py")        return    total_files = len(data_files)    logging.info(f"Найдено {total_files} инструментов для тестирования.")    # Запускаем цикл по каждому найденному файлу    for i, filename in enumerate(data_files):        # Извлекаем FIGI из имени файла (убираем расширение .parquet)        figi = os.path.splitext(filename)[0]                logging.info(f"\n({i+1}/{total_files}) Тестирование FIGI: {figi}...")                # Собираем команду для запуска run.py как списка аргументов        command = [            sys.executable,            "run.py",            "--mode", "backtest",            "--strategy", strategy_name,            "--figi", figi,        ]                # Запускаем run.py как отдельный дочерний процесс и ждем его завершения        # Это гарантирует, что каждый запуск будет чистым и независимым        subprocess.run(command)    logging.info("\n--- Пакетное тестирование завершено ---")def main():    """    Отвечает за парсинг аргументов и вызов основной логики тестирования.    """    parser = argparse.ArgumentParser(description="Менеджер пакетного тестирования стратегий.")    parser.add_argument("--strategy", type=str, required=True,                        help="Имя стратегии для тестирования (из реестра в run.py).")    parser.add_argument("--interval", type=str, required=True,                        help="Интервал данных (имя папки в директории /data).")    args = parser.parse_args()    run_batch_test(strategy_name=args.strategy, interval=args.interval)if __name__ == "__main__":    main()