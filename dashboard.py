import os
import pandas as pd
import streamlit as st
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots

from analyzer import BacktestAnalyzer
from config import PATH_CONFIG, BACKTEST_CONFIG

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã Streamlit ---
st.set_page_config(
    page_title="Market Bots Dashboard",
    page_icon="ü§ñ",
    layout="wide",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—é —à–∏—Ä–∏–Ω—É —ç–∫—Ä–∞–Ω–∞
)


# --- –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö ---
# @st.cache_data –≥–æ–≤–æ—Ä–∏—Ç Streamlit'—É –≤—ã–ø–æ–ª–Ω—è—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑,
# –µ—Å–ª–∏ –≤—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å. –≠—Ç–æ –ö–õ–Æ–ß–ï–í–û–ô —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.
@st.cache_data
def load_all_backtests(logs_dir: str) -> pd.DataFrame:
    """
    –°–∫–∞–Ω–∏—Ä—É–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å –ª–æ–≥–∞–º–∏, –∑–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ _trades.jsonl —Ñ–∞–π–ª—ã
    –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç DataFrame —Å–æ —Å–≤–æ–¥–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –ø–æ –∫–∞–∂–¥–æ–º—É –±—ç–∫—Ç–µ—Å—Ç—É.
    """
    all_results = []
    if not os.path.isdir(logs_dir):
        return pd.DataFrame()  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π DF, –µ—Å–ª–∏ –ø–∞–ø–∫–∏ –Ω–µ—Ç

    for filename in os.listdir(logs_dir):
        if filename.endswith("_trades.jsonl"):
            file_path = os.path.join(logs_dir, filename)
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥ –∏–∑ BacktestAnalyzer!
                trades_df = BacktestAnalyzer.load_trades_from_file(file_path)
                if trades_df.empty:
                    continue

                # –ü–∞—Ä—Å–∏–º –∏–º—è —Ñ–∞–π–ª–∞, —á—Ç–æ–±—ã –∏–∑–≤–ª–µ—á—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                parts = filename.replace('_trades.jsonl', '').split('_')
                strategy_name = parts[2]
                figi = parts[3]
                interval = parts[4]
                risk_manager = parts[5].replace('RM-', '')

                # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±–µ–Ω—á–º–∞—Ä–∫–∞.
                data_path = os.path.join(PATH_CONFIG["DATA_DIR"], interval, f"{figi}.parquet")
                if not os.path.exists(data_path):
                    print(f"Warning: Data file not found for benchmark: {data_path}")
                    continue
                historical_data = pd.read_parquet(data_path)

                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ –±—ç–∫—Ç–µ—Å—Ç–∞
                analyzer = BacktestAnalyzer(
                    trades_df=trades_df,
                    historical_data=historical_data,
                    initial_capital=BACKTEST_CONFIG["INITIAL_CAPITAL"],
                    interval=interval,
                    risk_manager_type=risk_manager
                )
                metrics = analyzer.calculate_metrics()

                # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
                result_row = {
                    "File": filename,
                    "Strategy": strategy_name,
                    "FIGI": figi,
                    "Interval": interval,
                    "Risk Manager": risk_manager,
                    "PnL (Strategy %)": float(metrics["Total PnL (Strategy)"].split(' ')[1].replace('(', '').replace('%)', '')),
                    "PnL (B&H %)": float(metrics["Total PnL (Buy & Hold)"].split(' ')[1].replace('(', '').replace('%)', '')),
                    "Win Rate (%)": float(metrics["Win Rate"].replace('%', '')),
                    "Max Drawdown (%)": float(metrics["Max Drawdown"].replace('%', '')),
                    "Profit Factor": float(metrics["Profit Factor"]),
                    "Total Trades": int(metrics["Total Trades"]),
                }
                all_results.append(result_row)
            except Exception as e:
                # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º "–±–∏—Ç—ã–µ" —Ñ–∞–π–ª—ã, –Ω–æ –≤—ã–≤–æ–¥–∏–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å
                print(f"Warning: Could not process file {filename}. Error: {e}")

    return pd.DataFrame(all_results)


# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤ ---
def plot_equity_and_drawdown(analyzer: BacktestAnalyzer):
    """–†–∏—Å—É–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ –∫–∞–ø–∏—Ç–∞–ª–∞ –∏ –ø—Ä–æ—Å–∞–¥–æ–∫."""
    fig = make_subplots(rows=2, cols=1, shared_xaxes=True, vertical_spacing=0.05,
                        row_heights=[0.7, 0.3])

    # –ì—Ä–∞—Ñ–∏–∫ –∫–∞–ø–∏—Ç–∞–ª–∞
    fig.add_trace(go.Scatter(x=analyzer.trades.index, y=analyzer.trades['equity_curve'],
                             mode='lines', name='Equity Curve'), row=1, col=1)

    # –ì—Ä–∞—Ñ–∏–∫ Buy & Hold
    benchmark_resampled = analyzer.benchmark_equity.reset_index(drop=True)
    benchmark_resampled.index = np.linspace(0, len(analyzer.trades) - 1, len(benchmark_resampled))
    fig.add_trace(go.Scatter(x=benchmark_resampled.index, y=benchmark_resampled.values,
                             mode='lines', name='Buy & Hold', line=dict(dash='dash', color='grey')), row=1, col=1)

    # –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ—Å–∞–¥–æ–∫ (Underwater Plot)
    fig.add_trace(go.Scatter(x=analyzer.trades.index, y=analyzer.trades['drawdown_percent'],
                             mode='lines', name='Drawdown', fill='tozeroy', line_color='red'), row=2, col=1)

    fig.update_layout(title_text="–ö—Ä–∏–≤–∞—è –∫–∞–ø–∏—Ç–∞–ª–∞ –∏ –ø—Ä–æ—Å–∞–¥–∫–∏", height=600)
    fig.update_yaxes(title_text="–ö–∞–ø–∏—Ç–∞–ª", row=1, col=1)
    fig.update_yaxes(title_text="–ü—Ä–æ—Å–∞–¥–∫–∞ (%)", row=2, col=1)
    st.plotly_chart(fig, use_container_width=True)


def plot_pnl_distribution(analyzer: BacktestAnalyzer):
    """–†–∏—Å—É–µ—Ç –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—É —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è PnL –ø–æ —Å–¥–µ–ª–∫–∞–º."""
    fig = px.histogram(analyzer.trades, x="pnl", nbins=50,
                       title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ PnL –ø–æ —Å–¥–µ–ª–∫–∞–º",
                       labels={"pnl": "–ü—Ä–∏–±—ã–ª—å/—É–±—ã—Ç–æ–∫ –ø–æ —Å–¥–µ–ª–∫–µ"})
    st.plotly_chart(fig, use_container_width=True)


def plot_monthly_pnl(analyzer: BacktestAnalyzer):
    """–†–∏—Å—É–µ—Ç —Å—Ç–æ–ª–±—á–∞—Ç—É—é –¥–∏–∞–≥—Ä–∞–º–º—É PnL –ø–æ –º–µ—Å—è—Ü–∞–º."""
    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ 'timestamp_utc' - —ç—Ç–æ datetime –æ–±—ä–µ–∫—Ç –∏ —É—Å—Ç–∞–Ω–æ–≤–∏–º –µ–≥–æ –∫–∞–∫ –∏–Ω–¥–µ–∫—Å
    df = analyzer.trades.copy()
    df['timestamp_utc'] = pd.to_datetime(df['timestamp_utc'])
    df.set_index('timestamp_utc', inplace=True)

    monthly_pnl = df['pnl'].resample('M').sum().reset_index()
    monthly_pnl['month'] = monthly_pnl['timestamp_utc'].dt.strftime('%Y-%m')

    fig = px.bar(monthly_pnl, x='month', y='pnl',
                 title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ PnL –ø–æ –º–µ—Å—è—Ü–∞–º",
                 labels={"pnl": "–ú–µ—Å—è—á–Ω—ã–π PnL", "month": "–ú–µ—Å—è—Ü"},
                 color='pnl', color_continuous_scale=px.colors.diverging.RdYlGn)
    st.plotly_chart(fig, use_container_width=True)


# --- –û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
st.title("ü§ñ –ü–∞–Ω–µ–ª—å –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π")

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
summary_df = load_all_backtests(PATH_CONFIG["LOGS_DIR"])

if summary_df.empty:
    st.warning("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –±—ç–∫—Ç–µ—Å—Ç–æ–≤ (`_trades.jsonl`) –≤ –ø–∞–ø–∫–µ `logs/`.")
    st.info("–ó–∞–ø—É—Å—Ç–∏—Ç–µ –±—ç–∫—Ç–µ—Å—Ç —Å –ø–æ–º–æ—â—å—é `run.py` –∏–ª–∏ `batch_tester.py`, —á—Ç–æ–±—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.")
else:
    # --- –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ ---
    st.sidebar.header("–§–∏–ª—å—Ç—Ä—ã")

    selected_strategies = st.sidebar.multiselect(
        "–°—Ç—Ä–∞—Ç–µ–≥–∏–∏",
        options=summary_df["Strategy"].unique(),
        default=summary_df["Strategy"].unique()
    )
    selected_figis = st.sidebar.multiselect(
        "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã (FIGI)",
        options=summary_df["FIGI"].unique(),
        default=summary_df["FIGI"].unique()
    )
    selected_rms = st.sidebar.multiselect(
        "–†–∏—Å–∫-–º–µ–Ω–µ–¥–∂–µ—Ä—ã",
        options=summary_df["Risk Manager"].unique(),
        default=summary_df["Risk Manager"].unique()
    )

    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
    filtered_df = summary_df[
        (summary_df["Strategy"].isin(selected_strategies)) &
        (summary_df["FIGI"].isin(selected_figis)) &
        (summary_df["Risk Manager"].isin(selected_rms))
        ]

    # --- –û—Å–Ω–æ–≤–Ω–æ–π —ç–∫—Ä–∞–Ω ---
    st.header("–°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    st.dataframe(filtered_df.style.format({
        "PnL (Strategy %)": "{:.2f}%",
        "PnL (B&H %)": "{:.2f}%",
        "Win Rate (%)": "{:.2f}%",
        "Max Drawdown (%)": "{:.2f}%",
        "Profit Factor": "{:.2f}",
    }), use_container_width=True)

    st.header("–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –±—ç–∫—Ç–µ—Å—Ç–∞")

    # –í—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±—ç–∫—Ç–µ—Å—Ç–∞ –∏–∑ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö
    selected_file = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ –±—ç–∫—Ç–µ—Å—Ç –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:",
        options=filtered_df["File"].tolist()
    )

    if selected_file:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        trades_df = BacktestAnalyzer.load_trades_from_file(os.path.join(PATH_CONFIG["LOGS_DIR"], selected_file))

        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –±—ç–∫—Ç–µ—Å—Ç–∞
        row = filtered_df[filtered_df["File"] == selected_file].iloc[0]

        #  –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —Ç–∞–∫ –∂–µ, –∫–∞–∫ –º—ã —ç—Ç–æ –¥–µ–ª–∞–ª–∏ –≤ load_all_backtests
        data_path = os.path.join(PATH_CONFIG["DATA_DIR"], row["Interval"], f"{row['FIGI']}.parquet")
        historical_data = pd.read_parquet(data_path)

        analyzer = BacktestAnalyzer(
            trades_df=trades_df,
            historical_data=historical_data,
            initial_capital=BACKTEST_CONFIG["INITIAL_CAPITAL"],
            interval=row["Interval"],
            risk_manager_type=row["Risk Manager"]
        )

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Ä–∞—Å—Å—á–∏—Ç–∞–µ–º –ø—Ä–æ—Å–∞–¥–∫—É –≤ % –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
        analyzer.trades['drawdown_percent'] = (analyzer.trades['equity_curve'] / analyzer.trades[
            'equity_curve'].cummax() - 1) * 100

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤
        tab1, tab2 = st.tabs(["üìà –ö—Ä–∏–≤–∞—è –∫–∞–ø–∏—Ç–∞–ª–∞ –∏ –ø—Ä–æ—Å–∞–¥–∫–∏", "üìä –ê–Ω–∞–ª–∏–∑ PnL"])

        with tab1:
            plot_equity_and_drawdown(analyzer)

        with tab2:
            plot_pnl_distribution(analyzer)
            plot_monthly_pnl(analyzer)